import computerAssetController from "../Controllers/computerAsset.js";
import express from "express";

const router = express.Router();

/**
 * @swagger
 * /computerAsset/getAll:
 *   get:
 *     tags:
 *       - ComputerAsset
 *     summary: Get all computer assets
 *     responses:
 *       '200':
 *         description: Computer assets fetched successfully
 */
router.get('/getAll', computerAssetController.getAllComputerAssets);

/**
 * @swagger
 * /computerAsset/getById:
 *   get:
 *     tags:
 *       - ComputerAsset
 *     summary: Get a computer asset by ID
 *     parameters:
 *       - name: id
 *         in: query
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       '200':
 *         description: Computer asset fetched successfully
 */
router.get('/getById', computerAssetController.getComputerAssetById);

/**
 * @swagger
 * /computerAsset/create:
 *   post:
 *     tags:
 *       - ComputerAsset
 *     summary: Create a computer asset record
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [assetId, brand, model, serialNumber, processor, ram1, ram2, totalRam, warrantyStart, warrantyEnd]
 *             properties:
 *               assetId:
 *                 type: integer
 *                 description: References the main Asset.id this computer asset belongs to
 *                 example: 1
 *               brand:
 *                 type: string
 *                 example: Lenovo
 *               model:
 *                 type: string
 *                 example: ThinkPad T14
 *               serialNumber:
 *                 type: string
 *                 example: SN123456
 *               processor:
 *                 type: string
 *                 example: Intel i7-1260P
 *               ram1:
 *                 type: string
 *                 example: 8GB
 *               ram2:
 *                 type: string
 *                 example: 8GB
 *               totalRam:
 *                 type: string
 *                 example: 16GB
 *               warrantyStart:
 *                 type: string
 *                 format: date
 *                 example: 2024-01-01
 *               warrantyEnd:
 *                 type: string
 *                 format: date
 *                 example: 2026-01-01
 *     responses:
 *       '201':
 *         description: Computer asset created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                 data:
 *                   $ref: '#/components/schemas/ComputerAsset'
 */
router.post('/create', computerAssetController.createComputerAsset);

/**
 * @swagger
 * /computerAsset/update:
 *   put:
 *     tags:
 *       - ComputerAsset
 *     summary: Update a computer asset record
 *     parameters:
 *       - name: id
 *         in: query
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             description: Fields to update; only include fields that need changes
 *             properties:
 *               assetId:
 *                 type: integer
 *                 description: References Asset.id generated by Sequelize
 *                 example: 1
 *               brand:
 *                 type: string
 *               model:
 *                 type: string
 *               serialNumber:
 *                 type: string
 *               processor:
 *                 type: string
 *               ram1:
 *                 type: string
 *               ram2:
 *                 type: string
 *               totalRam:
 *                 type: string
 *               warrantyStart:
 *                 type: string
 *                 format: date
 *               warrantyEnd:
 *                 type: string
 *                 format: date
 *     responses:
 *       '200':
 *         description: Computer asset updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                 data:
 *                   $ref: '#/components/schemas/ComputerAsset'
 */
router.put('/update', computerAssetController.updateComputerAsset);

/**
 * @swagger
 * /computerAsset/delete:
 *   delete:
 *     tags:
 *       - ComputerAsset
 *     summary: Delete a computer asset record
 *     parameters:
 *       - name: id
 *         in: query
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       '200':
 *         description: Computer asset deleted successfully
 */
router.delete('/delete', computerAssetController.deleteComputerAsset);

export default router;


